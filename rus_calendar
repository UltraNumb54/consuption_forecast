import csv
from datetime import date, timedelta

def generate_calendar(start_year, end_year, output_filename):
    """
    Генерирует производственный календарь России в формате CSV.
    Учитывает выходные (суббота, воскресенье) и основные праздники с переносами
    на основе постановлений Правительства РФ.
    """
    # Список дат, которые официально являются рабочими выходными днями
    # (перенесенные праздники или дополнительные выходные)
    official_non_working_days = {
        # 2017
        date(2017, 1, 2), date(2017, 1, 3), date(2017, 1, 4), date(2017, 1, 5), date(2017, 1, 6),
        date(2017, 2, 23), date(2017, 2, 24),
        date(2017, 3, 8),
        date(2017, 5, 1), date(2017, 5, 8), date(2017, 5, 9),
        date(2017, 6, 12),
        date(2017, 11, 4), date(2017, 11, 6),
        # 2018
        date(2018, 1, 1), date(2018, 1, 2), date(2018, 1, 3), date(2018, 1, 4), date(2018, 1, 5), date(2018, 1, 8),
        date(2018, 2, 23),
        date(2018, 3, 8), date(2018, 3, 9),
        date(2018, 5, 1), date(2018, 5, 2), date(2018, 5, 9),
        date(2018, 6, 11), date(2018, 6, 12),
        date(2018, 11, 5),
        date(2018, 12, 31),
        # 2019
        date(2019, 1, 1), date(2019, 1, 2), date(2019, 1, 3), date(2019, 1, 4), date(2019, 1, 7), date(2019, 1, 8),
        date(2019, 2, 23),
        date(2019, 3, 8),
        date(2019, 5, 1), date(2019, 5, 2), date(2019, 5, 3), date(2019, 5, 9), date(2019, 5, 10),
        date(2019, 6, 12),
        date(2019, 11, 4),
        # 2020
        date(2020, 1, 1), date(2020, 1, 2), date(2020, 1, 3), date(2020, 1, 6), date(2020, 1, 7), date(2020, 1, 8),
        date(2020, 2, 24),
        date(2020, 3, 9), date(2020, 3, 10),
        date(2020, 5, 1), date(2020, 5, 4), date(2020, 5, 5), date(2020, 5, 11),
        date(2020, 6, 12),
        date(2020, 11, 4),
        # 2021
        date(2021, 1, 1), date(2021, 1, 4), date(2021, 1, 5), date(2021, 1, 6), date(2021, 1, 7), date(2021, 1, 8),
        date(2021, 2, 22), date(2021, 2, 23),
        date(2021, 3, 8),
        date(2021, 5, 3), date(2021, 5, 10),
        date(2021, 6, 14),
        date(2021, 11, 4), date(2021, 11, 5),
        # 2022
        date(2022, 1, 3), date(2022, 1, 4), date(2022, 1, 5), date(2022, 1, 6), date(2022, 1, 7),
        date(2022, 2, 23),
        date(2022, 3, 7), date(2022, 3, 8),
        date(2022, 5, 2), date(2022, 5, 3), date(2022, 5, 10),
        date(2022, 6, 13),
        date(2022, 11, 4),
        # 2023
        date(2023, 1, 2), date(2023, 1, 3), date(2023, 1, 4), date(2023, 1, 5), date(2023, 1, 6),
        date(2023, 2, 23), date(2023, 2, 24),
        date(2023, 3, 8),
        date(2023, 5, 1), date(2023, 5, 8), date(2023, 5, 9),
        date(2023, 6, 12),
        date(2023, 11, 6),
        # 2024
        date(2024, 1, 1), date(2024, 1, 2), date(2024, 1, 3), date(2024, 1, 4), date(2024, 1, 5), date(2024, 1, 8),
        date(2024, 2, 23),
        date(2024, 3, 8),
        date(2024, 5, 1), date(2024, 5, 9), date(2024, 5, 10),
        date(2024, 6, 12),
        date(2024, 11, 4),
        date(2024, 12, 30), date(2024, 12, 31),
        # 2025 (по состоянию на сентябрь 2024, данные могут измениться)
        date(2025, 1, 1), date(2025, 1, 2), date(2025, 1, 3), date(2025, 1, 6), date(2025, 1, 7), date(2025, 1, 8),
        date(2025, 2, 24),
        date(2025, 3, 10),
        date(2025, 5, 1), date(2025, 5, 2), date(2025, 5, 9),
        date(2025, 6, 12),
        date(2025, 11, 3),
        # Предполагаемые переносы для 2025, могут быть уточнены
        # date(2025, 12, 31), # Обычно не переносится, если не указано иное
    }

    # Список дат, которые официально являются рабочими днями, несмотря на то,
    # что приходятся на выходные (например, суббота, воскресенье)
    official_working_weekend_days = {
        # 2017
        date(2017, 2, 25), # Рабочая суббота перед 8 марта
        # 2018
        # 2019
        date(2019, 4, 28), # Рабочая воскресенье перед 1 и 9 мая
        date(2019, 6, 15), # Рабочая суббота перед 12 июня
        date(2019, 11, 2), # Рабочая суббота перед 4 ноября
        # 2020
        date(2020, 2, 15), # Рабочая суббота перед 23 февраля
        date(2020, 5, 2), # Рабочая суббота перед 1, 4, 5, 9 мая
        date(2020, 5, 30), # Рабочая суббота перед 12 июня
        # 2021
        date(2021, 2, 20), # Рабочая суббота перед 23 февраля
        date(2021, 5, 1), # Рабочая суббота перед 3, 10 мая
        date(2021, 6, 12), # Рабочая суббота перед 14 июня
        date(2021, 11, 6), # Рабочая суббота перед 4, 5 ноября
        # 2022
        date(2022, 3, 5), # Рабочая суббота перед 8 марта
        date(2022, 5, 7), # Рабочая суббота перед 2, 3, 10 мая
        date(2022, 6, 11), # Рабочая суббота перед 13 июня
        # 2023
        date(2023, 2, 25), # Рабочая суббота перед 23 февраля
        # 2024
        date(2024, 4, 27), # Рабочая суббота перед 1, 9, 10 мая
        date(2024, 11, 2), # Рабочая суббота перед 4 ноября
        # 2025 (по состоянию на сентябрь 2024, данные могут измениться)
        # date(2025, 5, 3), # Рабочая суббота перед 1, 2, 9 мая
    }

    # Основные государственные праздники (даты, которые всегда выходные, если не перенесены)
    holidays = {
        (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8),
        (2, 23),
        (3, 8),
        (5, 1), (5, 9),
        (6, 12),
        (11, 4)
    }

    # Генерируем список всех дат
    start_date = date(start_year, 1, 1)
    # end_date = date(end_year, 12, 31)
    # До октября 2025
    end_date = date(2025, 10, 31)

    calendar_data = []

    current_date = start_date
    while current_date <= end_date:
        day_of_week = current_date.weekday()  # 0 - Понедельник, 6 - Воскресенье
        is_weekend = (day_of_week == 5 or day_of_week == 6) # 5 - Суббота, 6 - Воскресенье

        # Определяем тип дня
        if current_date in official_non_working_days:
            day_type = "non-working holiday" # Праздничный день (перенесенный или дополнительный выходной)
        elif current_date in official_working_weekend_days:
            day_type = "working weekend" # Рабочий день в выходной
        elif is_weekend:
            day_type = "weekend" # Обычный выходной
        elif (current_date.month, current_date.day) in holidays:
            day_type = "non-working holiday" # Основной государственный праздник
        else:
            day_type = "working day" # Обычный рабочий день

        calendar_data.append({
            "date": current_date.strftime("%Y-%m-%d"),
            "day_type": day_type
        })
        current_date += timedelta(days=1)

    # Записываем данные в CSV файл
    with open(output_filename, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['date', 'day_type']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()
        for row in calendar_data:
            writer.writerow(row)

    print(f"Производственный календарь сохранен в файл {output_filename}")

# Генерируем календарь
generate_calendar(2017, 2025, 'russian_production_calendar_2017_2025.csv')
