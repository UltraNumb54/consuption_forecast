text

## üìä –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é

## üìÅ –§–∞–π–ª `prediction_interface.py` - –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å:

```python
import pandas as pd
import numpy as np
from catboost import CatBoostRegressor
from datetime import datetime, timedelta

# === –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø ===

class EnergyForecastInterface:
    def __init__(self, model_path='energy_forecast_model.cbm'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥–µ–ª–∏"""
        self.model = CatBoostRegressor()
        self.model.load_model(model_path)
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    def predict_next_hours(self, historical_data, weather_forecast, start_time, hours_ahead=24):
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤–ø–µ—Ä–µ–¥
        
        –ü–ê–†–ê–ú–ï–¢–†–´:
        -----------
        historical_data : dict
            –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            –§–æ—Ä–º–∞—Ç: {
                'datetime': —Å–ø–∏—Å–æ–∫ datetime,
                'consumption': —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è,
                'temperature': —Å–ø–∏—Å–æ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            }
        
        weather_forecast : list of dict
            –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            –§–æ—Ä–º–∞—Ç: [
                {'temperature': float, 'humidity': float, 'wind_speed': float},
                ...
            ]
        
        start_time : datetime
            –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            
        hours_ahead : int
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24)
        
        –í–û–ó–í–†–ê–©–ê–ï–¢:
        -----------
        dict : {
            'datetime': —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π,
            'predicted_consumption': —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        }
        """
        
        # 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        df_history = pd.DataFrame({
            'datetime': historical_data['datetime'],
            'consumption': historical_data['consumption']
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'temperature' in historical_data:
            df_history['temperature'] = historical_data['temperature']
        
        df_history['datetime'] = pd.to_datetime(df_history['datetime'])
        
        # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        predictions = []
        prediction_times = []
        
        # 3. –†–∞—Å—à–∏—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        extended_history = df_history.copy()
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å {start_time}")
        print(f"üìä –ò—Å—Ç–æ—Ä–∏—è: {len(extended_history)} –∑–∞–ø–∏—Å–µ–π")
        print(f"‚è∞ –ì–æ—Ä–∏–∑–æ–Ω—Ç: {hours_ahead} —á–∞—Å–æ–≤")
        
        # 4. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        for i in range(hours_ahead):
            current_time = start_time + timedelta(hours=i)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç)
            if i < len(weather_forecast):
                weather = weather_forecast[i]
            else:
                weather = {'temperature': 10.0, 'humidity': 70.0, 'wind_speed': 3.0}
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = self._prepare_features(extended_history, current_time, weather)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            pred_df = pd.DataFrame([features])
            prediction = self.model.predict(pred_df)[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            predictions.append(prediction)
            prediction_times.append(current_time)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
            new_row = {
                'datetime': current_time,
                'consumption': prediction,
                'temperature': weather['temperature']
            }
            
            extended_history = pd.concat([extended_history, pd.DataFrame([new_row])], ignore_index=True)
            
            print(f"   {current_time}: {prediction:.1f} –ú–í—Ç")
        
        return {
            'datetime': prediction_times,
            'predicted_consumption': predictions
        }
    
    def _prepare_features(self, df_history, prediction_time, weather_data):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        
        features = {
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            'hour': prediction_time.hour,
            'dayofweek': prediction_time.weekday(),
            'month': prediction_time.month,
            
            # –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            'temperature': weather_data.get('temperature', 10.0),
            'humidity': weather_data.get('humidity', 70.0),
            'wind_speed': weather_data.get('wind_speed', 3.0),
        }
        
        # –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        for lag in [1, 2, 3, 24, 48, 168]:
            lag_time = prediction_time - timedelta(hours=lag)
            lag_data = df_history[df_history['datetime'] == lag_time]
            
            if len(lag_data) > 0:
                features[f'consumption_lag_{lag}'] = lag_data['consumption'].iloc[0]
            else:
                features[f'consumption_lag_{lag}'] = df_history['consumption'].median()
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        for window in [3, 6, 12, 24]:
            recent_data = df_history[
                df_history['datetime'] < prediction_time
            ].tail(window)
            
            if len(recent_data) >= min(3, window):
                features[f'consumption_rolling_mean_{window}'] = recent_data['consumption'].mean()
                features[f'consumption_rolling_std_{window}'] = recent_data['consumption'].std()
            else:
                features[f'consumption_rolling_mean_{window}'] = df_history['consumption'].mean()
                features[f'consumption_rolling_std_{window}'] = df_history['consumption'].std()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        features.update({
            'is_holiday': 0,
            'is_working_weekend': 0,
            'is_regular_weekend': int(prediction_time.weekday() in [5, 6]),
            'is_working_day': int(prediction_time.weekday() not in [5, 6]),
            'is_weekend_or_holiday': int(prediction_time.weekday() in [5, 6]),
            'is_weekend': int(prediction_time.weekday() in [5, 6]),
        })
        
        return features

# === –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===

def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    forecast = EnergyForecastInterface()
    
    # 2. –ì–æ—Ç–æ–≤–∏–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    # –í–ê–ñ–ù–û: –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å 2025-09-05 00:00 –ø–æ 2025-09-11 23:00
    historical_data = {
        'datetime': [
            datetime(2025, 9, 11, 22, 0),
            datetime(2025, 9, 11, 23, 0),
            # ... –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–µ 168 –∑–∞–ø–∏—Å–µ–π (7 –¥–Ω–µ–π * 24 —á–∞—Å–∞)
        ],
        'consumption': [
            1200.5,  # –ú–í—Ç
            1180.3,
            # ... —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        ]
    }
    
    # 3. –ì–æ—Ç–æ–≤–∏–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 24 —á–∞—Å–∞ –≤–ø–µ—Ä–µ–¥
    weather_forecast = [
        {'temperature': 15.0, 'humidity': 65.0, 'wind_speed': 2.5},  # 2025-09-12 00:00
        {'temperature': 14.5, 'humidity': 68.0, 'wind_speed': 3.0},  # 2025-09-12 01:00
        # ... –¥–æ–±–∞–≤—å—Ç–µ 24 –∑–∞–ø–∏—Å–∏
    ]
    
    # 4. –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    start_time = datetime(2025, 9, 12, 0, 0)
    
    # 5. –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    results = forecast.predict_next_hours(
        historical_data=historical_data,
        weather_forecast=weather_forecast,
        start_time=start_time,
        hours_ahead=24
    )
    
    # 6. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
    for dt, pred in zip(results['datetime'], results['predicted_consumption']):
        print(f"{dt}: {pred:.1f} –ú–í—Ç")

def explain_input_format():
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*70)
    print("–§–û–†–ú–ê–¢ –í–•–û–î–ù–´–• –î–ê–ù–ù–´–• –î–õ–Ø –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø")
    print("="*70)
    
    print("""
    üìä –¢–†–ï–ë–£–ï–ú–´–ï –î–ê–ù–ù–´–ï:

    1Ô∏è‚É£ –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
       –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (168 —á–∞—Å–æ–≤)
       –§–æ—Ä–º–∞—Ç: 
       {
           'datetime': [datetime –æ–±—ä–µ–∫—Ç—ã],
           'consumption': [–∑–Ω–∞—á–µ–Ω–∏—è –≤ –ú–í—Ç],
           'temperature': [–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã]
       }

    2Ô∏è‚É£ –ü–†–û–ì–ù–û–ó –ü–û–ì–û–î–´ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
       –ü–µ—Ä–∏–æ–¥: –Ω–∞ –≤–µ—Å—å –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
       –§–æ—Ä–º–∞—Ç:
       [
           {'temperature': float, 'humidity': float, 'wind_speed': float},
           ... (–ø–æ –æ–¥–Ω–æ–º—É dict –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Å)
       ]

    3Ô∏è‚É£ –í–†–ï–ú–Ø –ù–ê–ß–ê–õ–ê:
       datetime –æ–±—ä–µ–∫—Ç - –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

    4Ô∏è‚É£ –ì–û–†–ò–ó–û–ù–¢ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:
       int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤–ø–µ—Ä–µ–¥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1-48)

    üìà –ü–†–ò–ú–ï–† –§–û–†–ú–ê–¢–ê:

    historical_data = {
        'datetime': [
            datetime(2025, 9, 11, 22, 0),  # 22:00 11 —Å–µ–Ω—Ç—è–±—Ä—è
            datetime(2025, 9, 11, 23, 0),  # 23:00 11 —Å–µ–Ω—Ç—è–±—Ä—è
        ],
        'consumption': [1200.5, 1180.3]
    }

    weather_forecast = [
        {'temperature': 15.0, 'humidity': 65.0, 'wind_speed': 2.5},  # 00:00 12 —Å–µ–Ω—Ç—è–±—Ä—è
        {'temperature': 14.5, 'humidity': 68.0, 'wind_speed': 3.0},  # 01:00 12 —Å–µ–Ω—Ç—è–±—Ä—è
    ]

    start_time = datetime(2025, 9, 12, 0, 0)  # –ù–∞—á–∏–Ω–∞–µ–º —Å 00:00 12 —Å–µ–Ω—Ç—è–±—Ä—è
    hours_ahead = 24  # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ 24 —á–∞—Å–∞ –≤–ø–µ—Ä–µ–¥
    """)

if __name__ == "__main__":
    explain_input_format()
    # example_usage()  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
```

## üìã **–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:**

### üìä **1. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):**
```python
historical_data = {
    'datetime': [datetime –æ–±—ä–µ–∫—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π],  # 168 –∑–∞–ø–∏—Å–µ–π
    'consumption': [–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤ –ú–í—Ç],         # 168 –∑–Ω–∞—á–µ–Ω–∏–π
    'temperature': [–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã]            # –µ—Å–ª–∏ –µ—Å—Ç—å
}
```

### üå°Ô∏è **2. –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):**
```python
weather_forecast = [
    {'temperature': 15.0, 'humidity': 65.0, 'wind_speed': 2.5},  # –ß–∞—Å 1
    {'temperature': 14.5, 'humidity': 68.0, 'wind_speed': 3.0},  # –ß–∞—Å 2
    # ... –ø–æ –æ–¥–Ω–æ–º—É dict –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
]
```

### ‚è∞ **3. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:**
```python
start_time = datetime(2025, 9, 12, 0, 0)  # –ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
hours_ahead = 24  # –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å
```

## üéØ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥:**
- **–ú–∏–Ω–∏–º—É–º**: 24 —á–∞—Å–∞ (1 –¥–µ–Ω—å)
- **–û–ø—Ç–∏–º–∞–ª—å–Ω–æ**: 48 —á–∞—Å–æ–≤ (2 –¥–Ω—è)  
- **–ú–∞–∫—Å–∏–º—É–º**: 72 —á–∞—Å–∞ (3 –¥–Ω—è) - —Ç–æ—á–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Å–Ω–∏–∂–∞—Ç—å—Å—è

## üöÄ **–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**

```python
# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
forecast = EnergyForecastInterface()

# –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ 24 —á–∞—Å–∞ –≤–ø–µ—Ä–µ–¥
results = forecast.predict_next_hours(
    historical_data=–≤–∞—à_–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π_–¥–∞—Ç–∞—Å–µ—Ç,
    weather_forecast=–≤–∞—à_–ø—Ä–æ–≥–Ω–æ–∑_–ø–æ–≥–æ–¥—ã,
    start_time=datetime(2025, 9, 12, 0, 0),
    hours_ahead=24
)

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
print(results['predicted_consumption'])  # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
```

**–í–∞–∂–Ω–æ**: –ß–µ–º –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ (–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 168 —á–∞—Å–æ–≤), —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!
