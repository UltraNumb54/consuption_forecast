import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

# === КОНСТАНТЫ ДЛЯ ВХОДНЫХ ДАННЫХ ===
CONSUMPTION_FILE = 'consumption_data.csv'                    # Исходный файл с потреблением
WEATHER_FILE = 'weather_data.csv'                            # Исходный файл с погодой
CALENDAR_FILE = 'russian_production_calendar_2017_2025.csv'  # Файл с календарем
OUTPUT_DIAGNOSTICS_PLOT = 'diagnostics_2019.png'             # Файл для сохранения графика
TARGET_YEAR = 2019                                           # Год для диагностики

def diagnose_2019_problem():
    """Детальная диагностика проблемы с 2019 годом"""
    
    print(f"=== ДЕТАЛЬНАЯ ДИАГНОСТИКА {TARGET_YEAR} ГОДА ===")
    
    # 1. Загрузка данных по потреблению
    print(f"Загрузка данных потребления из {CONSUMPTION_FILE}...")
    df_cons = pd.read_csv(CONSUMPTION_FILE, sep=';')
    df_cons['datetime'] = pd.to_datetime(df_cons['date']) + pd.to_timedelta(df_cons['hour'], unit='h')
    df_cons_target = df_cons[df_cons['datetime'].dt.year == TARGET_YEAR].sort_values('datetime')
    
    print(f"Данные потребления {TARGET_YEAR}: {len(df_cons_target)} записей")
    
    # 2. Загрузка данных погоды
    print(f"Загрузка данных погоды из {WEATHER_FILE}...")
    with open(WEATHER_FILE, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # Найдем начало данных
    data_start = 0
    for i, line in enumerate(lines):
        if line.strip().startswith('"Местное время'):
            data_start = i + 1
            break
    
    df_weather = pd.read_csv(WEATHER_FILE, sep=';', skiprows=data_start, 
                           encoding='utf-8', on_bad_lines='skip')
    df_weather['datetime'] = pd.to_datetime(df_weather.iloc[:, 0], dayfirst=True)
    df_weather_target = df_weather[df_weather['datetime'].dt.year == TARGET_YEAR].sort_values('datetime')
    
    print(f"Данные погоды {TARGET_YEAR}: {len(df_weather_target)} записей")
    
    # 3. Анализ плотности по месяцам
    df_cons_target['month'] = df_cons_target['datetime'].dt.month
    monthly_cons = df_cons_target.groupby('month').size()
    
    df_weather_target['month'] = df_weather_target['datetime'].dt.month
    df_weather_target['datetime_hour'] = df_weather_target['datetime'].dt.floor('H')
    monthly_weather = df_weather_target.groupby('month')['datetime_hour'].nunique()
    
    print(f"\nПлотность данных {TARGET_YEAR} по месяцам:")
    print("Месяц | Потребление | Погода | Разница")
    print("-" * 45)
    for month in range(1, 13):
        cons_count = monthly_cons.get(month, 0)
        weather_count = monthly_weather.get(month, 0)
        difference = cons_count - weather_count
        print(f"{month:2d}    | {cons_count:6d}    | {weather_count:6d} | {difference:+6d}")
    
    # 4. Визуализация
    plt.figure(figsize=(15, 8))
    
    # График плотности данных
    plt.subplot(2, 1, 1)
    months = range(1, 13)
    cons_values = [monthly_cons.get(m, 0) for m in months]
    weather_values = [monthly_weather.get(m, 0) for m in months]
    
    plt.plot(months, cons_values, marker='o', label='Потребление', linewidth=2)
    plt.plot(months, weather_values, marker='s', label='Погода', linewidth=2)
    plt.title(f'Плотность данных по месяцам {TARGET_YEAR}')
    plt.ylabel('Количество записей')
    plt.xlabel('Месяц')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # График разницы
    plt.subplot(2, 1, 2)
    differences = [cons_values[i] - weather_values[i] for i in range(12)]
    colors = ['red' if x < 0 else 'green' for x in differences]
    plt.bar(months, differences, color=colors, alpha=0.7)
    plt.title(f'Разница между потреблением и погодой по месяцам {TARGET_YEAR}')
    plt.ylabel('Разница (потребление - погода)')
    plt.xlabel('Месяц')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(OUTPUT_DIAGNOSTICS_PLOT, dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"\nГрафик сохранен в {OUTPUT_DIAGNOSTICS_PLOT}")

def main():
    try:
        diagnose_2019_problem()
        print("\n=== ДИАГНОСТИКА ЗАВЕРШЕНА ===")
    except Exception as e:
        print(f"Ошибка при диагностике: {e}")

if __name__ == "__main__":
    main()
