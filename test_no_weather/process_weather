import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# === КОНСТАНТЫ ===
CONSUMPTION_FILE = 'consumption_data.csv'
WEATHER_FILE = 'weather_data.csv'
CALENDAR_FILE = 'russian_production_calendar_2017_2025.csv'
OUTPUT_FILE = 'enhanced_filtered_with_ww_encoded.csv'

def load_weather_data():
    # Попробуем разные разделители
    for sep in [';', ',', '\t', '|']:
        try:
            df = pd.read_csv(WEATHER_FILE, sep=sep, encoding='utf-8', nrows=5)
            print(f"Успешно прочитано с разделителем: '{sep}'")
            print("Столбцы:", df.columns.tolist())
            break
        except Exception:
            continue
    else:
        raise ValueError("Не удалось определить разделитель. Проверьте файл вручную.")

    # Полное чтение
    weather = pd.read_csv(WEATHER_FILE, sep=sep, encoding='utf-8')
    
    # Ищем столбцы с нужными названиями
    col_map = {}
    for col in weather.columns:
        if 'Местное время' in col:
            col_map[col] = 'datetime'
        elif col.lower() in ['t', 'temperature', 'temp']:
            col_map[col] = 'temperature'
        elif col.lower() in ['u', 'humidity', 'влажность']:
            col_map[col] = 'humidity'
        elif col.lower() in ['ff', 'wind', 'wind_speed', 'ветер']:
            col_map[col] = 'wind_speed'
        elif "w'w'" in col.lower() or 'w1w1' in col.lower() or 'w2w2' in col.lower():
            col_map[col] = 'weather_event2'

    weather = weather.rename(columns=col_map)
    print("Переименованные столбцы:", weather.columns.tolist())
    return weather

def load_and_merge_data():
    # Загрузка основных данных
    df = pd.read_csv(CONSUMPTION_FILE, sep=';', encoding='utf-8')
    print("Столбцы в consumption_data.csv:", df.columns.tolist())

    # Создание datetime
    df['datetime'] = pd.to_datetime(df['date']) + pd.to_timedelta(df['hour'], unit='h')
    df = df.sort_values('datetime').reset_index(drop=True)
    df['date_only'] = df['datetime'].dt.date

    # Преобразование consumption
    df['consumption'] = pd.to_numeric(df['consumption'], errors='coerce')

    # Загрузка календаря
    calendar = pd.read_csv(CALENDAR_FILE)
    print("Столбцы в календаре:", calendar.columns.tolist())
    calendar['date'] = pd.to_datetime(calendar['date']).dt.date
    df = df.merge(calendar, left_on='date_only', right_on='date', how='left')
    df = df.drop(columns=['date_only'])

    # Загрузка погоды
    weather = load_weather_data()

    weather['datetime'] = pd.to_datetime(weather['datetime'], dayfirst=True)
    weather = weather[['datetime', 'temperature', 'humidity', 'wind_speed', 'weather_event2']].copy()

    # Обработка числовых столбцов
    for col in ["temperature", "humidity", "wind_speed"]:
        if col in weather.columns:
            weather[col] = pd.to_numeric(weather[col], errors='coerce')

    # Объединение
    df = df.merge(weather, on='datetime', how='left')

    # === БИНАРНЫЕ ПРИЗНАКИ ИЗ W'W' ===
    if "weather_event2" in df.columns:
        # Приведение к строке, чтобы избежать ошибок
        df["weather_event2"] = df["weather_event2"].astype(str)
        # Приведение к нижнему регистру, замена скобок и запятых на пробел
        df["weather_event2_clean"] = df["weather_event2"].str.lower().str.replace(',', ' ').str.replace('(', ' ').str.replace(')', ' ')

        # Создание бинарных признаков
        weather_keywords = {
            "is_thunderstorm": ["гроза"],
            "is_snow": ["снег"],
            "is_rain": ["дождь"],
            "is_drizzle": ["морось"],
            "is_shower": ["ливень"]
        }

        for col_name, keywords in weather_keywords.items():
            df[col_name] = 0
            for keyword in keywords:
                df[col_name] = df[col_name].where(~df["weather_event2_clean"].str.contains(keyword, na=False), 1)
    else:
        # Если нет столбца, создаём заглушки
        for col_name in ["is_thunderstorm", "is_snow", "is_rain", "is_drizzle", "is_shower"]:
            df[col_name] = 0

    # Удаляем временный столбец
    df = df.drop(columns=["weather_event2", "weather_event2_clean"], errors='ignore')

    # Бинарные признаки из day_type
    df['is_holiday'] = (df['day_type'] == 'non-working holiday').astype(int)
    df['is_working_weekend'] = (df['day_type'] == 'working weekend').astype(int)
    df['is_regular_weekend'] = (df['day_type'] == 'weekend').astype(int)
    df['is_working_day'] = (df['day_type'] == 'working day').astype(int)
    df['is_weekend_or_holiday'] = df[['is_holiday', 'is_regular_weekend']].max(axis=1)

    # Выбор нужных столбцов
    df = df[['datetime', 'consumption', 'temperature', 'humidity', 'wind_speed',
             'is_thunderstorm', 'is_snow', 'is_rain', 'is_drizzle', 'is_shower',
             'is_holiday', 'is_working_weekend', 'is_regular_weekend', 'is_working_day',
             'is_weekend_or_holiday']].copy()

    df['year'] = df['datetime'].dt.year
    df = df.dropna(subset=['consumption'])
    return df

def create_features(df):
    df = df.copy()
    df['hour'] = df['datetime'].dt.hour
    df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 24)
    df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 24)
    df['dayofweek'] = df['datetime'].dt.dayofweek
    df['month'] = df['datetime'].dt.month
    df['week_of_year'] = df['datetime'].dt.isocalendar().week

    season = df['month'] % 12 // 3 + 1
    df['is_winter'] = (season == 1).astype(int)
    df['is_spring'] = (season == 2).astype(int)
    df['is_summer'] = (season == 3).astype(int)
    df['is_autumn'] = (season == 4).astype(int)
    df['is_weekend'] = df['dayofweek'].isin([5, 6]).astype(int)

    lag_hours = [1, 2, 3, 24, 48, 72]
    for lag in lag_hours:
        df[f'consumption_lag_{lag}'] = df['consumption'].shift(lag)

    windows = [3, 6, 12, 24, 720]
    for w in windows:
        df[f'consumption_rolling_mean_{w}'] = df['consumption'].rolling(w).mean()
        df[f'consumption_rolling_std_{w}'] = df['consumption'].rolling(w).std()

    spans = [3, 6, 12, 24]
    for s in spans:
        df[f'consumption_ewm_mean_{s}'] = df['consumption'].ewm(span=s).mean()

    return df

def main():
    df = load_and_merge_data()
    df = create_features(df)
    df = df.dropna()
    df.to_csv(OUTPUT_FILE, index=False)
    print(f"Данные с бинарными W'W' признаками сохранены в {OUTPUT_FILE}")

if __name__ == "__main__":
    main()
