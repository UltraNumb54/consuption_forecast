# data_validation.py
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

TRAIN_FILE = 'enhanced_filtered_training_data.csv'
FULL_FILE = 'enhanced_filtered_full_data.csv'

def validate_datasets():
    print("=== –í–ê–õ–ò–î–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–´–• –î–ê–¢–ê–°–ï–¢–û–í ===")
    
    df_train = pd.read_csv(TRAIN_FILE)
    df_full = pd.read_csv(FULL_FILE)
    
    print(f"–û–±—É—á–∞—é—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç: {len(df_train)} —Å—Ç—Ä–æ–∫, {len(df_train.columns)} –∫–æ–ª–æ–Ω–æ–∫")
    print(f"–ü–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {len(df_full)} —Å—Ç—Ä–æ–∫, {len(df_full.columns)} –∫–æ–ª–æ–Ω–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    print("\n=== –ü–†–û–ü–£–°–ö–ò –í –û–ë–£–ß–ê–Æ–©–ï–ú –î–ê–¢–ê–°–ï–¢–ï ===")
    missing_train = df_train.isnull().sum()
    missing_train = missing_train[missing_train > 0]
    if len(missing_train) == 0:
        print("‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤!")
    else:
        for col, cnt in missing_train.items():
            print(f"  {col}: {cnt} ({cnt/len(df_train)*100:.2f}%)")
    
    print("\n=== –ü–†–û–ü–£–°–ö–ò –í –ü–û–õ–ù–û–ú –î–ê–¢–ê–°–ï–¢–ï ===")
    missing_full = df_full.isnull().sum()
    missing_full = missing_full[missing_full > 0]
    if len(missing_full) == 0:
        print("‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤!")
    else:
        for col, cnt in missing_full.items():
            print(f"  {col}: {cnt} ({cnt/len(df_full)*100:.2f}%)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    new_weather_cols = ['pressure', 'dew_point', 'visibility', 'is_rain', 'is_fog', 'is_snow', 'is_overcast']
    print("\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ù–û–í–´–ú –ü–û–ì–û–î–ù–´–ú –ü–†–ò–ó–ù–ê–ö–ê–ú ===")
    for col in new_weather_cols:
        if col in df_train.columns:
            non_null = df_train[col].notna().sum()
            total = len(df_train)
            print(f"  {col}: {non_null}/{total} ({non_null/total*100:.1f}%) –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
            if df_train[col].dtype in ['float64', 'int64']:
                print(f"      min={df_train[col].min():.2f}, max={df_train[col].max():.2f}, mean={df_train[col].mean():.2f}")
        else:
            print(f"  {col}: ‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    plt.figure(figsize=(15, 10))
    plot_cols = [col for col in ['pressure', 'dew_point', 'visibility'] if col in df_train.columns]
    for i, col in enumerate(plot_cols, 1):
        plt.subplot(2, 2, i)
        df_train[col].hist(bins=50, alpha=0.7)
        plt.title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col}')
        plt.grid(False)
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º
    if 'consumption' in df_train.columns:
        corr_cols = plot_cols + ['temperature', 'humidity']
        corr_data = df_train[['consumption'] + [c for c in corr_cols if c in df_train.columns]]
        corr_matrix = corr_data.corr()
        
        plt.subplot(2, 2, len(plot_cols) + 1)
        sns.heatmap(corr_matrix[['consumption']].drop('consumption'), annot=True, cmap='coolwarm', center=0)
        plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å consumption')
    
    plt.tight_layout()
    plt.savefig('data_validation_report.png', dpi=300, bbox_inches='tight')
    print("\nüìä –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ data_validation_report.png")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ CSV
    report = pd.DataFrame({
        'column': df_train.columns,
        'dtype': df_train.dtypes,
        'non_null_count': df_train.notnull().sum(),
        'null_pct': (df_train.isnull().sum() / len(df_train) * 100).round(2),
        'mean': df_train.select_dtypes(include=[np.number]).mean(),
        'std': df_train.select_dtypes(include=[np.number]).std()
    }).set_index('column')
    
    report.to_csv('data_validation_summary.csv')
    print("üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ data_validation_summary.csv")

if __name__ == "__main__":
    validate_datasets()
